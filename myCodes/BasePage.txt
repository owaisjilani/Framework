package com.aml.base;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.ibm.icu.text.DateFormat;
import com.ibm.icu.text.SimpleDateFormat;

import net.serenitybdd.core.pages.PageObject;
import net.serenitybdd.core.pages.WebElementFacade;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;

public class BasePage extends PageObject {

	/******* Common Functionality ************/

	// Find Element
	public WebElementFacade getElement(String locator) {

		try {

			return find(getBy(locator));

		} catch (NoSuchElementException e) {

			e.getMessage();

		}

		return null;
	}

	// Finding Multiple Elements
	public List<WebElementFacade> getElements(String locator) {

		try {

			return findAll(getBy(locator));

		} catch (NoSuchElementException e) {

			e.getMessage();

		}

		return null;
	}

	private By getBy(String locator) {

		By by = null;

		try {

			if (locator.startsWith("id=")) {

				locator = locator.substring(3);
				by = By.id(locator);
			} else if (locator.startsWith("xpath=")) {

				locator = locator.substring(6);
				by = By.xpath(locator);
			} else if (locator.startsWith("css=")) {

				locator = locator.substring(4);
				by = By.cssSelector(locator);
			} else if (locator.startsWith("name=")) {

				locator = locator.substring(5);
				by = By.name(locator);
			} else if (locator.startsWith("link=")) {

				locator = locator.substring(5);
				by = By.linkText(locator);
			}
			return by;

		} catch (Throwable t) {

			t.getMessage();
		}

		return null;

	}

	public void click(String locator) {

		waitFor(getElement(locator)).click();
	}

	public void type(String locator, String value) {

		waitFor(getElement(locator)).sendKeys(value);
	}

	public String getText(String locator) {

		return waitFor(getElement(locator)).getText();
	}

	public void moveMouseTo(String locator) {

		WebElement moveTo = waitFor(getElement(locator));
		withAction().moveToElement(moveTo).perform();
	}

	protected void clicknSelectNormalDropDown(WebElement element, String dropDownValue, String selectionType) {
		Select select = new Select(element);

		try {
			switch (selectionType) {
			case "ByVisibleText":
				select.selectByVisibleText(dropDownValue);
				break;

			case "ByIndex":
				select.selectByIndex(Integer.parseInt(selectionType));
				break;

			default:
				select.selectByValue(selectionType);
				break;
			}
		} catch (Exception e) {
			System.out.println("============Normal Drop Down Selection Failed=============");
			e.printStackTrace();
		}

	}

	public void scrollBrowserPage(WebDriver driver, int horizontalScroll, int verticalScroll) {
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// Vertical scroll down by 600 pixels
		js.executeScript("window.scrollBy(" + horizontalScroll + "," + verticalScroll + ")");
	}

	public void scrollModalWindow(WebDriver driver, WebElement scrollElement) {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView(true);", scrollElement);

	}

	public static void keyboardActions(String keyboardAction, String copyString) {

		try {
			Robot robot = new Robot();
			switch (keyboardAction) {
			case "copyToClipboard":
				Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
				StringSelection stringSelection = new StringSelection(copyString);
				clipboard.setContents(stringSelection, null);
				break;
			case "copy":
				robot.keyPress(KeyEvent.VK_CONTROL);
				robot.keyPress(KeyEvent.VK_C);
				robot.keyRelease(KeyEvent.VK_C);
				robot.keyRelease(KeyEvent.VK_CONTROL);
				break;

			case "paste":
				robot.keyPress(KeyEvent.VK_CONTROL);
				robot.keyPress(KeyEvent.VK_V);
				robot.keyRelease(KeyEvent.VK_V);
				robot.keyRelease(KeyEvent.VK_CONTROL);
				break;

			case "enter":
				robot.keyPress(KeyEvent.VK_ENTER);
				robot.keyRelease(KeyEvent.VK_ENTER);
				break;

			}
		} catch (Exception e) {
			System.out.println("============Invalid Operation============");
			e.printStackTrace();
		}
	}

	public String returnCurrentDateTime(String dateTimeFormat) {
		DateFormat dateFormat = new SimpleDateFormat(dateTimeFormat);
		return dateFormat.format(new Date());

	}

	public static void click(WebDriver driver, WebElementFacade element) {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", element);
	}

}
