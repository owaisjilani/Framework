package Utils;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import com.opencsv.CSVReader;

import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
@Author 
Owais Jilani
13-July-21  */


public class CsvReader {
	public static void main(String[] args) {
		String fileName="ACCOUNT_.csv";
		String ColumnID="NUMBER";
		String RowID="8888";
		String header="STATUS";
		Map<String,String>result=readCSVasMap(fileName, ColumnID, header);
		ArrayList<String> keys=getKeys(result);
		ArrayList<String> values=getValues(result);
		System.out.println("The keys for Map is =========== "+keys.toString());
		System.out.println("The Values for Map is =========== "+values.toString());
		//ArrayList<String> keyList = new ArrayList<String>(result.keySet());
		//readCSVByCustomerID(fileName, ColumnID,RowID, header);
		//readCSVForallCustomerID(fileName, ColumnID, header);
	}

	public static ArrayList<String> getKeys(Map<String,String> map)
	{
		return new ArrayList<String>(map.keySet());

	}

	public static ArrayList<String> getValues(Map<String,String> map)
	{
		return new ArrayList<String>(map.values());

	}


	public static String readCSVByCustomerID(String fileName,String ColumnID,String RowID,String header) {
		String value="NULL";
		String path=System.getProperty("user.dir")+"\\src\\test\\Resources\\DataIntakeInput\\"+fileName;
		try(
				BufferedReader br = new BufferedReader(new FileReader(path));
				CSVParser parser = CSVFormat.DEFAULT.withDelimiter(',').withHeader().parse(br);
				) {

			for(CSVRecord record : parser) {
				String colNum=record.get(ColumnID);

				if(colNum.equalsIgnoreCase(RowID))
				{
					value=record.get(header);
					System.out.println("This is the required value == "+value);
				}

			}

		} catch (Exception e) {
			System.out.println(e);
		}
		return value.trim();
	}

	//Storing two coloumn Value as MAP
	public static Map<String, String> readCSVasMap(String fileName,String ColumnID,String header) {
		String path=System.getProperty("user.dir")+"\\src\\test\\Resources\\DataIntakeInput\\"+fileName;
		Map<String,String> map = new HashMap<>();
		try(
				FileReader filereader = new FileReader(path);
				CSVReader reader = new CSVReader(filereader);
				) {
			String[] keys=reader.readNext();
			String[] values=reader.readNext();
			if(keys.length == values.length){
				for(int index = 0; index < keys.length; index++){
					map.put(keys[index], values[index]);
				}
			}

			//Coloumn Wise key-Value Pair
			/*Map<String, String> result = new HashMap<>();
			  List<String[]> part=reader.readAll();
			  for(String[] ls : part) 
			{
				System.out.println("This is list" +ls.toString());
				String key = ls[0]; // This is your 'AAA'
				String value = ls[1]; // This is your 1000
				if (result.get(key) == null) {
					result.put(key, value); 
				} else {
					result.put(key, result.get(key) + value); // There's already a value here, add it with new value
				}
			}
			System.out.println(result.toString());
			 */
		}
		catch (Exception e) {
			System.out.println(e);
		}
		return map;
	}

	public static String readCSVForallCustomerID(String fileName,String ColumnID,String header) {
		String value="NULL";
		List<String> ar=new ArrayList<String>();
		//List<String> sr=new ArrayList<String>();
		//Map<String,String> hm=new HashMap<String,String>();
		String path=System.getProperty("user.dir")+"\\src\\test\\Resources\\DataIntakeInput\\"+fileName;
		try(
				BufferedReader br = new BufferedReader(new FileReader(path));
				CSVParser parser = CSVFormat.DEFAULT.withDelimiter(',').withHeader().parse(br);
				) {

			for(CSVRecord record : parser) {
				String colNum=record.get(ColumnID);
				ar.add(colNum);
				for(int i=0;i<ar.size();i++)
				{
					if(colNum.equalsIgnoreCase(ar.get(i)))
					{
						value=record.get(header);
						System.out.println("This is the required value == "+value);
					}
				}

			}

		} catch (Exception e) {
			System.out.println(e);
		}
		return value.trim();
	}

}
